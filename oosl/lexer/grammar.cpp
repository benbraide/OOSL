#include "grammar.h"

oosl::lexer::grammar::grammar()
	: grammar::base_type(start_, "OOSL"){
	using namespace boost::spirit;
	rule_list_[rule_id_type::hex] = qi::lexeme[qi::lit("0x") > +(qi::digit | qi::no_case[qi::char_('a', 'f')])];
	rule_list_[rule_id_type::bin] = qi::lexeme[qi::lit("0b") > +qi::char_('0', '1')];
	rule_list_[rule_id_type::real] = qi::lexeme[*qi::digit > '.' > +qi::digit];
	rule_list_[rule_id_type::rad] = qi::lexeme[qi::char_('r') > +(qi::digit | qi::no_case[qi::char_('a', 'z')])];
	rule_list_[rule_id_type::dec] = qi::lexeme[qi::char_('1', '9') > *qi::digit];
	rule_list_[rule_id_type::oct] = qi::lexeme[qi::char_('0') > *qi::char_('0', '7')];

	
}

void oosl::lexer::grammar::initialize_symbols_(){
	symbols_.add
		("module", rule_id_type::module_)
		("export", rule_id_type::export_)
		("import", rule_id_type::import_)
		("void", rule_id_type::void_)
		("any", rule_id_type::any_)
		("auto", rule_id_type::auto_)
		("bool", rule_id_type::bool_)
		("byte", rule_id_type::byte_)
		("char", rule_id_type::char_)
		("wchar", rule_id_type::wchar_)
		("int8", rule_id_type::int8_)
		("uint8", rule_id_type::uint8_)
		("int16", rule_id_type::int16_)
		("uint16", rule_id_type::uint16_)
		("int32", rule_id_type::int32_)
		("uint32", rule_id_type::uint32_)
		("int64", rule_id_type::int64_)
		("uint64", rule_id_type::uint64_)
		("int128", rule_id_type::int128_)
		("uint128", rule_id_type::uint128_)
		("float", rule_id_type::float_)
		("double", rule_id_type::double_)
		("double128", rule_id_type::ldouble)
		("string", rule_id_type::string_)
		("wstring", rule_id_type::wstring_)
		("enum", rule_id_type::enum_)
		("union", rule_id_type::union_)
		("struct", rule_id_type::struct_)
		("class", rule_id_type::class_)
		("namespace", rule_id_type::namespace_)
		("array", rule_id_type::array_)
		("function", rule_id_type::function)
		("nullptr_t", rule_id_type::nullptr_t)
		("nan_t", rule_id_type::nan_t)
		("type_t", rule_id_type::type_)
		("node_t", rule_id_type::node_)
		("storage_t", rule_id_type::storage_)
		("decltype", rule_id_type::decltype_)
		("static", rule_id_type::static_)
		("thread_local", rule_id_type::tls)
		("true", rule_id_type::true_)
		("false", rule_id_type::false_)
		("indeterminate", rule_id_type::indeterminate)
		("nullptr", rule_id_type::nullptr_)
		("NaN", rule_id_type::nan)
		("using", rule_id_type::using_)
		("typedef", rule_id_type::typedef_)
		("operator", rule_id_type::operator_)
		("sizeof", rule_id_type::sizeof_)
		("typeof", rule_id_type::typeof)
		("echo", rule_id_type::echo)
		("if", rule_id_type::if_)
		("else", rule_id_type::else_)
		("unless", rule_id_type::unless)
		("while", rule_id_type::while_)
		("do", rule_id_type::do_)
		("until", rule_id_type::until)
		("for", rule_id_type::for_)
		("switch", rule_id_type::switch_)
		("case", rule_id_type::case_)
		("default", rule_id_type::default_)
		("break", rule_id_type::break_)
		("continue", rule_id_type::continue_)
		("return", rule_id_type::return_)
		("throw", rule_id_type::throw_)
		("try", rule_id_type::try_)
		("catch", rule_id_type::catch_)
		("finally", rule_id_type::finally_)
		("new", rule_id_type::new_)
		("delete", rule_id_type::delete_)
		("static_cast", rule_id_type::static_cast_)
		("reinterpret_cast", rule_id_type::reinterpret_cast_)
		("self", rule_id_type::self)
		("__placeholder", rule_id_type::placeholder)
		("__call", rule_id_type::call)
		("===", rule_id_type::explicit_equality)
		("!==", rule_id_type::explicit_inverse_equality)
		("<<=", rule_id_type::compound_left_shift)
		(">>=", rule_id_type::compound_right_shift)
		("...", rule_id_type::ellipsis)
		("||", rule_id_type::relational_or)
		("&&", rule_id_type::relational_and)
		("~=", rule_id_type::like)
		("==", rule_id_type::equality)
		("!=", rule_id_type::inverse_equality)
		("<=", rule_id_type::less_or_equal)
		(">=", rule_id_type::more_or_equal)
		("+=", rule_id_type::compound_plus)
		("-=", rule_id_type::compound_minus)
		("*=", rule_id_type::compound_times)
		("/=", rule_id_type::compound_divide)
		("%=", rule_id_type::compound_modulus)
		("|=", rule_id_type::compound_bitwise_or)
		("&=", rule_id_type::compound_bitwise_and)
		("^=", rule_id_type::compound_bitwise_xor)
		("->", rule_id_type::member_pointer_access)
		("++", rule_id_type::increment)
		("--", rule_id_type::decrement)
		("<<", rule_id_type::left_shift)
		(">>", rule_id_type::right_shift)
		("?", rule_id_type::ternary)
		("|", rule_id_type::bitwise_or)
		("&", rule_id_type::bitwise_and)
		("^", rule_id_type::bitwise_xor)
		("<", rule_id_type::less)
		(">", rule_id_type::more)
		("+", rule_id_type::plus)
		("-", rule_id_type::minus)
		("*", rule_id_type::times)
		("/", rule_id_type::divide)
		("%", rule_id_type::modulus)
		(".", rule_id_type::member_access)
		("!", rule_id_type::relational_not)
		("~", rule_id_type::bitwise_inverse)
		("=", rule_id_type::assignment);
}
